#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/2.6.2/
#+AUTHOR: Daniel Szmulewicz & Daniel Slutsky
#+EMAIL: 
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS: css/tables.css
#+OPTIONS: num:nil toc:nil
#+Title: Let's talk about Clojure / Form Follow Function

* Part I: Introduction
** A little quiz for starters
Moshe is looking at Yael, and Yael is looking at Eli. Moshe is married, but Eli is not. Is a married person looking at an unmarried person?
- A) Yes
- B) No
- C) There is not enough information to derive the correct answer.
** Evolution
The human brain is wired to accept the first seemingly fit answer that comes to mind when considering a problem.
It makes sense from an evolutionary point of view: heuristics speed up the process of finding a solution. Speed is important for survival.
** Reasoning and Logic
#+BEGIN_QUOTE
Psychologists concur with philosophers in the irrelevance of logic to everyday reasoning. Decades of work on Wason’s selection task seem to confirm this. — Pascal Engels
#+END_QUOTE
** Thinking, Fast and Slow
Following Daniel Kahneman’s terminology, the brain works in two modes, system 1 and system 2. System 1 is the thinking that is fast, intuitive, and unaware of its workings. System 2 is the slow thinking able to correct system 1’s mistakes. The problem is that we often fail to recognize when we need to switch gear and slow down. 
** So, programming are we?
Question: When we program, do we use system 1 or system 2?
#+ATTR_REVEAL: :frag roll-in
We use both. When we learn or face a difficult part of the program, we use system 2, but most of the time we’ll try to maximize system 1 and proceed fast to use what we’ve learnt, what we already know.
** Regularity
Learnability of a system (programming language) depends on the regularity it provides. When we learn a language, we develop intuitions around it. We are able to predict that the runtime is going to do y if we write x. 
#+REVEAL: split
[[https://github.com/Dobiasd/articles/blob/master/programming_language_learning_curves.md][Learning Curves for several programming languages]]
#+REVEAL: split
#+BEGIN_QUOTE
Civilization advances by extending the number of important operations which we can perform without thinking about them" — Alfred North Whitehead
#+END_QUOTE
** How do you infuse regularity to a programming language?
#+ATTR_REVEAL: :frag roll-in
By making it adhere to well-defined rules.
*** An over-arching theme:
- Everything is an object.
- Everything is an actor.
- Everything is a file (descriptor).
- Everything is a function.
#+BEGIN_NOTES
What about primitives, references, fields, local variables, methods...?
#+END_NOTES
*** The history of language design
- Start from the Von Neumann Architecture and add abstraction.
- Start from Mathematics and remove abstraction.
#+REVEAL: split
#+BEGIN_QUOTE
Computation is a process following a well-defined model expressed as, for example, an algorithm or a protocol.
#+END_QUOTE
#+ATTR_REVEAL: :frag roll-in
Models of computation are extremely useful to inventors/designers of high-level programming languages.
** Models of computation, some examples
Turing Machines, Cellular Automata, Finite State Machines, Stack Machines, Graph Automata, Lambda Calculus, Fractran, Tiling Systems, Chemical Reaction Systems, Hopfield Networks, Boltzmann Machines, Neural Networks, Circuits, Graphical Models, Boolean Algebra, String Rewriting Systems, Semigroups, Quantum Waves, Diophantine Equations, Tag Systems, The Actor Model, Term rewriting, etc.
** Models of computation
- Lambda Calculus is at the heart of the most highly regarded programming languages: Haskell, ML and Lisp.
** Lambda Calculus
Alonzo Church developed a notation for arbitrary functions. His notation is called λ-calculus (“lambda calculus”). Church introduced his formalism to give a functional foundation for Mathematics but in the end mathematicians preferred (axiomatic) set theory. The λ-calculus was re-discovered as a versatile tool in Computer Science by people like McCarthy, Strachey, Landin, and Scott in the 1960s.
** Haskell
#+BEGIN_QUOTE
The thing I am the proudest of is that 25 years since we built the first prototype of GHC, its intermediate language is still the Lambda Calculus. So it really takes this enormous language – I mean, Haskell is really a very big language now — and it squeezes it all down into this tiny little language that really just has variables, application, lambda, let – you don’t really need let, but it’s very helpful – case and then the only thing we’ve added recently is  coercions, a single addition to the intermediate language in 25 years, which is just amazing. — Simon Peyton Jones
#+END_QUOTE

#+BEGIN_NOTES 
The Glasgow Haskell Compiler (GHC) uses an intermediate language, called “Core,” as its internal program representation within the compiler’s simplification phase. Core resembles a subset of Haskell, but with explicit type annotations in the style of the polymorphic lambda calculus (Fω).

ghc-core: A convenient command line wrapper for GHC that displays GHC's optimised core and assembly output in a human readable, colourised manner, in a pager. Unix systems only, currently.

#+BEGIN_QUOTE
That’s all it is. And it’s testament to the expressiveness of system F, John C. Reynold’s work. — Simon Peyton Jone
#+END_QUOTE

Dumping out GHC’s intermediate structures:
#+BEGIN_QUOTE shell
ghc -ddump-simpl
#+END_QUOTE

#+END_NOTES

#+REVEAL: split

#+BEGIN_QUOTE 
The fact that everything can be explained in terms of translation to that small language, is an incredible sanity check. It means if you invent some wild feature in the source language, if you can’t translate it in the intermediate language, well, maybe it’s too wild! It’s a sanity check on the language design.
#+END_QUOTE

#+REVEAL: split

#+BEGIN_QUOTE
Choice of lexical syntax is arbitrary, uninteresting, and quite often distracts from actual substance in comparative language discussion. If there is one central theme is that the design of the core calculus should drive development, not the frontend language. — Stephen Diehl, /Building a modern functional compiler from first principles/.
#+END_QUOTE
** Bill Burdick’s entertaining experiments
#+REVEAL_HTML: <img src=images/space-invaders.png></img>
- [[Http://tinyconcepts.com/invaders.html][Space invaders]]
- [[http://tinyconcepts.com/fs.pl/lambda.fsl/doc/tip/evaluator.html][Lambda Calculus compiler and interpreter in Javascript]]

** Differences between Lisp and Lambda Calculus
In Lambda Calculus, expressions are reduced. In Lisp, expressions are evaluated.

- α-conversion (changing bound variables)
- β-reduction (function application)
- η-conversion (expresses the idea of extensionality)

#+BEGIN_NOTES

[[http://kazimirmajorinc.blogspot.co.il/2011/01/some-differences-between-lambda.html][Some differences between lambda-calculus and Lisp]]
[[http://stackoverflow.com/questions/2750421/what-type-of-lambda-calculus-would-lisp-loosely-be-an-example-of][What type of lambda calculus would Lisp loosely be an example of?]]

Lisp has non-functional data, like atoms and numbers and such, so this would count as untyped lambda calculus extended with constants.
In summary, Lisp corresponds to an untyped, call-by-value lambda calculus extended with constants.
#+END_NOTES

** What did McCarthy discover?
#+BEGIN_QUOTE
If you try to answer the question, what is the smallest number of operators you need in order to write an interpreter for a language in itself, Lisp is what you get. In other words, Lisp is not something John McCarthy invented, so much as something he discovered. – Paul Graham
#+END_QUOTE
** Seven operators
If you have seven primitive operators (quote, atom, eq, car, cdr, cons, and cond) then you can define another function, eval, that acts as a Lisp interpreter.

[[https://leanpub.com/readevalprintlove002][A primordial Lisp described in detail.]]

** S-expressions
S-expressions are a notation for tree-structured data, invented for and popularized by the programming language Lisp, which uses them for source code as well as data.
#+REVEAL_HTML: <img src="http://upload.wikimedia.org/wikipedia/en/e/e3/Corrected_S-expression_tree_2.png"  height="242" width="242">

#+BEGIN_SRC clojure
(* 2 (+ 3 4))
#+END_SRC   

With S-expressions, code and data share the same representation.
** M-expressions
S-expressions are an accident of History. M-expressions were intented to be the user syntax. S-expressions were intended to be an intermediate language.
#+BEGIN_QUOTE
The initial implementation of Lisp was expected to be a very long process, as compilers at the time were expected to take years to write. Implementation began with hand-compiling particular functions while the M-expression sublanguage was still tentative.
#+END_QUOTE
Hand-compiling the function eval is a very easy task, and a community of S-expression Lisp programmers quickly developed. M-expressions fell into neglect, and were never implemented.
** Lisp takes off
LISP became a common language for artificial intelligence (AI) programming, partly owing to the confluence of LISP and AI work at MIT and partly because AI programs capable of "learning" could be written in LISP as self-modifying programs. Since then, it has expanded in a family of dialects, regularly reincarnating in new shape and form but always retaining the same core semantics.
** The importance of Lisp in the industry
Contributions to programming as we know it today. A long list of ideas that originated with Lispers:

- garbage collection
- tree data structures
- if-then-else structure
- dynamic typing
- homoiconicity
- metaprogramming
- self-hosting compilers
- interactive environment

** Syntactic abstraction
The argument making the case for Lisp languages is that of extensibility. No special power to the language designers over its users. This is a property of homoiconic languages. Traditionally, the most defining feature of Lisp.  
** Enlightenment
#+BEGIN_QUOTE
Lisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot. — Eric Raymond
#+END_QUOTE
#+BEGIN_QUOTE
90% of what you learn while studying your first Lisp will carry over to your next. — Psyllo, Stack Overflow
#+END_QUOTE
* Part II: Clojure
** Clojure is a Lisp
#+BEGIN_QUOTE
Clojure is pronounced exactly like closure, where the s/j has the zh sound as in azure, pleasure etc. The name was chosen to be unique. I wanted to involve c (c#), l (lisp) and j (java). Once I came up with Clojure, given the pun on closure, the available domains and vast emptiness of the googlespace, it was an easy decision. — Rich Hickey
#+END_QUOTE
** Closure 
#+BEGIN_SRC javascript
(function() {
    var x = 0;
    return function() {
        return x;
    }
})();
#+END_SRC
#+BEGIN_QUOTE
Sometimes it's called a closure, other times a saved lexical environment. Or, as some of us like to say, let over lambda. — Let Over Lambda, Doug Hoyte
#+END_QUOTE
#+BEGIN_SRC lisp
(let ((x 0))
    (lambda () x))
#+END_SRC
** Closures are fundamental
Closures are the building blocks of lisp. Closures achieve and provide encapsulation of data and functionality in a single, logical unit.
#+BEGIN_QUOTE
Because of this, lisp programmers often don't think in terms of classes and objects. Once assignable value cells and good old lambda expressions are available, object systems are, at best, occasionally useful abstractions and, at worst, special-case and redundant. — Doug Hoyte, Let Over Lambda, Closure Oriented Programming
#+END_QUOTE
** Closures and OO
#+BEGIN_QUOTE
It's possible, for instance, to implement almost all of the design patterns in the Gang of Four book in terms of Lisp macros. Rather than implementing the pattern each time you use it, you just invoke the correct macro and get it for free. — David Chisnall
#+END_QUOTE
** Functional vs OO
#+BEGIN_QUOTE
Whereas an object-oriented mindset will foster the approach of defining an application domain as a set of nouns (classes), the functional mind will see the solution as the composition or verbs (functions). Though both programmers may in all likelihood generate equivalent results, the functional solution will be more succinct, understandable, and reusable. — Michael Fogus, The Joy Clojure
#+END_QUOTE
** Clojure's motivation
Clojure was born out of frustration provoked in large part by the complexities of concurrent programming, complicated by the weaknesses of object-oriented programming in facilitating it. 
** Simple made easy
Something is simple if it is singular: it does one thing, it is made of one thing, etc. Something is easy if it is close at hand, i.e. familiar. Simplicity is objective; easiness is subjective and can be complex. 

[[http://www.infoq.com/presentations/Simple-Made-Easy][Infoq video]]

** Clojure’s characteristics
In Clojure: Data > Functions > Macros.
** Embrace the data
#+BEGIN_QUOTE
I like to tell people that a big part of what makes Clojure special is its philosophy of lightweight data modeling. — Mark Engelberg
#+END_QUOTE
*** Typical roundtrip scenario

|            | LDM  | OOP    |
|------------+------+--------|
| database   | data | data   |
| wire       | data | data   |
| server     | data | object |
| wire       | data | data   |
| client app | data | object |
| browser    | data | data   |
*** A closer look

|            | LDM                          | OOP                   |
|------------+------------------------------+-----------------------|
| database   | {:name "Bob" :age 24}        | {:name "Bob" :age 24} |
| wire       | {:name "Bob" :age 24}        | {:name "Bob" :age 24} |
| server     | {:name "Bob" :age 24}        | ORM / ActiveRecord    |
| wire       | {:name "Bob" :age 24}        | {:name "Bob" :age 24} |
| client app | (vals {:name "Bob" :age 24}) | Person.getName();     |
| browser    | "Bob"                        | "Bob"                 |
*** Values and change
OO typically unifies identity and state. In Clojure, logical identity is enforced via state management. 
- Persistent data structures
- Concurrency constructs to work with data on multiple cores
** Concurrency
Two types of concurrency:

| Shared memory | Message passing |
|---------------+-----------------|
| Threads       | Processes       |
| Locks         | Messages        |
| Mutexes       | No shared data  |

#+REVEAL: split
Which does Clojure support?

*** Shared Memory
Clojure does not replace the Java thread system, rather it works with it. 
#+ATTR_REVEAL: :frag roll-in
The software transactional memory system (STM) supports sharing changing state between threads in a synchronous and coordinated manner. 
#+ATTR_REVEAL: :frag roll-in
The agent system supports sharing changing state between threads in an asynchronous and independent manner. 
#+ATTR_REVEAL: :frag roll-in
The atoms system supports sharing changing state between threads in a synchronous and independent manner. 
#+ATTR_REVEAL: :frag roll-in
The dynamic var system supports isolating changing state within threads.
*** Message passing
Communicating Sequential Processes (CSP) is a formal language for describing patterns of interaction in concurrent systems.
#+BEGIN_QUOTE
One of the most successful models for providing high-level linguistic support for concurrency comes from Hoare's Communicating Sequential Processes, or CSP. 
#+END_QUOTE
Implemented as a library in Clojure(script).
*** CSP vs Actor model
The Actor Model and CSP diverge in their semantics of message passing.
#+REVEAL: split
#+REVEAL_HTML: <img src=http://arild.github.io/csp-presentation/images/csp_illustration1.png>
- Communication through channels
- Processes are "anonymous"
#+REVEAL: split
#+REVEAL_HTML: <img src=http://arild.github.io/csp-presentation/images/actor_illustration1.png>
- Point-to-point communication
- No anonymity
** Stories
With the potentials of a modern Lisp and a growing community of smart users, a perfect storm is brewing for a wave of innovation.
Clojure has strong stories for: 
- Big data 
- Interactive art (games, music, visuals)
- Web development

* Part III: Functional development in the browser
Rethinking web development with Clojurescript, core.async and Om.
** A DOM of Doom
#+BEGIN_QUOTE
The browser is a vast source of incompatibility, pain and misery. — Douglas Crockford
#+END_QUOTE

#+REVEAL_HTML: <iframe width="420" height="315" src="http://www.youtube.com/embed/Y2Y0U-2qJMs" frameborder="0" allowfullscreen></iframe>

#+BEGIN_QUOTE
Basically, bugs don’t get fixed in the web. — Douglas Crockford
#+END_QUOTE
** Cross-platform libraries and frameworks
#+BEGIN_QUOTE
Why are there so many of them? Because there’s a real need. The APIs provided by the browsers are inadequate for doing applications. But Javascript is such a powerful language that it is easily remedied. That’s one reason. Second, they are fun to make, creating little communities of interest around their work. — Douglas Crockford
#+END_QUOTE
** React
#+BEGIN_QUOTE
The framework cannot know to separate concerns for you. A React component is a highly cohesive building block for UIs loosely coupled with other components. — Pete Hunt
#+END_QUOTE
Javacript rendering library. Conceptually re-renders on every change. No templating language. Virtual DOM. Diffs for optimization.
